name: gemm prod server CI/CD

on:
  push:
    branches: [ main ]


env:
  ACCESS_TOKEN: ${{secrets.ACCESS_TOKEN}}
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_REGION: ${{secrets.AWS_REGION}}
  ECR_REGISTRY: ${{secrets.ECR_PROD_SERVER_REGISTRY}}
  ECR_REPOSITORY: ${{secrets.ECR_PROD_SERVER_REPOSITORY}}
  ECR_IMAGE_TAG: ${{github.sha}}
  S3_BUCKET_NAME: ${{secrets.S3_BUCKET_NAME}}
  S3_DEPLOY_FILE_NAME: ${{secrets.S3_DEPLOY_FILE_NAME}}
  CODE_DEPLOY_APPLICATION_NAME: ${{secrets.CODE_DEPLOY_APPLICATION_NAME}}
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: ${{secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME}}


jobs:
  integrate:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{env.ACCESS_TOKEN}}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{env.AWS_REGION}}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        run: |
          docker buildx build --push --platform linux/arm64,linux/amd64 \
          -t ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.ECR_IMAGE_TAG}} \
          -t ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:latest .
          

  deploy:
    needs: [ integrate ]
    runs-on: ubuntu-latest

    steps:
      - name: Run CodeDeploy
        run: |
          aws deploy create-deployment \
          --application-name ${{env.CODE_DEPLOY_APPLICATION_NAME}} \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --deployment-group-name ${{env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME}} \
          --s3-location bucket=${{env.S3_BUCKET_NAME}},bundleType=zip,key=${{env.S3_DEPLOY_FILE_NAME}}.zip
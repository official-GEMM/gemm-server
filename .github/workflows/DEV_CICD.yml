name: gemm dev server CI/CD

on:
  push:
    branches: [ develop ]

env:
  ACCESS_TOKEN: ${{secrets.ACCESS_TOKEN}}
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_REGION: ${{secrets.AWS_REGION}}
  ECR_REGISTRY: ${{secrets.ECR_DEV_SERVER_REGISTRY}}
  ECR_REPOSITORY: ${{secrets.ECR_DEV_SERVER_REPOSITORY}}
  SSH_HOST: ${{secrets.SSH_DEV_SERVER_HOST}}
  SSH_USERNAME: ${{secrets.SSH_DEV_SERVER_USERNAME}}
  SSH_KEY: ${{secrets.SSH_DEV_SERVER_KEY}}


jobs:
  integrate:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          token: $ACCESS_TOKEN
          clean: true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: $AWS_ACCESS_KEY_ID
          aws-secret-access-key: $AWS_SECRET_ACCESS_KEY
          aws-region: $AWS_REGION

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build --push --platform linux/arm64,linux/amd64 \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest.

  deploy:
    needs: [ integrate ]
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: $AWS_ACCESS_KEY_ID
          aws-secret-access-key: $AWS_SECRET_ACCESS_KEY
          aws-region: $AWS_REGION

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker compose restart
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: $SSH_HOST
          username: $SSH_USERNAME
          key: $SSH_KEY
          script: |
            docker-compose down
            docker rmi -f $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker-compose up -d

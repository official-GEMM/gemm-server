name: gemm dev server CI/CD

on:
  push:
    branches: [ develop ]

env:
  ACCESS_TOKEN: ${{secrets.ACCESS_TOKEN}}
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_REGION: ${{secrets.AWS_REGION}}
  AWS_SECURITY_GROUP_ID: ${{secrets.AWS_DEV_SERVER_SECURITY_GROUP_ID}}
  ECR_REGISTRY: ${{secrets.ECR_DEV_SERVER_REGISTRY}}
  ECR_REPOSITORY: ${{secrets.ECR_DEV_SERVER_REPOSITORY}}
  ECR_IMAGE_TAG: ${{github.sha}}
  SSH_HOST: ${{secrets.SSH_DEV_SERVER_HOST}}
  SSH_USERNAME: ${{secrets.SSH_DEV_SERVER_USERNAME}}
  SSH_KEY: ${{secrets.SSH_DEV_SERVER_KEY}}


jobs:
  integrate:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{env.ACCESS_TOKEN}}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{env.AWS_REGION}}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        run: |
          docker buildx build --push --platform linux/arm64,linux/amd64 \
          -t ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.ECR_IMAGE_TAG}} \
          -t ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:latest.

  deploy:
    needs: [ integrate ]
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{env.AWS_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get github actions public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Add github actions ip to security group
        run: |
          aws ec2 authorize-security-group-ingress \
          --group-id ${{secrets.AWS_SECURITY_GROUP_ID}} \
          --protocol tcp \
          --port 22 \
          --cidr ${{steps.ip.outputs.ipv4}}/32

      - name: Docker compose restart
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{env.SSH_HOST}}
          username: ${{env.SSH_USERNAME}}
          key: ${{env.SSH_KEY}}
          script: |
            docker-compose down
            docker rmi -f ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:latest
            docker-compose up -d

      - name: Remove github actions ip to security group
        run: |
          aws ec2 revoke-security-group-ingress \
          --group-id ${{secrets.AWS_SECURITY_GROUP_ID}} \
          --protocol tcp \
          --port 22 \
          --cidr ${{steps.ip.outputs.ipv4}}/32